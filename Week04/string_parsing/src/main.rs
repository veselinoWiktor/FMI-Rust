use std::str::FromStr;

fn main() {
    let x = i32::from_str("-13");
    let y = u8::from_str("323");
    let z = f32::from_str("5e-3");

    println!("{:?}\n{:?}\n{:?}", x, y, z);
    println!();

    // reciprocal to from_str and FromStr

    let x = "-13".parse::<i32>();
    let y = "323".parse::<u8>();
    let z = "5e-3".parse::<f32>();
    // –¢–∏–ø–∞ —Ç—É–∫ –ø—Ä–∏ parse –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω

    println!("{:?}\n{:?}\n{:?}", x, y, z);
    println!();

    let x: Result<i32, <i32 as FromStr>::Err> = "-13".parse();
    let y: Result<u8, <u8 as FromStr>::Err> = "323".parse();
    let z: Result<f32, <f32 as FromStr>::Err> = "5e-3".parse();
    // –¢—É–∫ –º–æ–∂–µ–º –¥–∞ –∏–∑—Ç—ä—Ä–≤–µ–º —Ç–∏–ø–∞

    println!("{:?}\n{:?}\n{:?}", x, y, z);
    println!();

    let x: Result<i32, _> = "-13".parse();
    let y: Result<u8, _> = "323".parse();
    let z: Result<f32, _> = "5e-3".parse();
    // –¢—É–∫ –º–æ–∂–µ–º –¥–∞ –∏–∑—Ç—ä—Ä–≤–µ–º —Ç–∏–ø–∞ –∏ —Ç–∏–ø–∞ –Ω–∞ –≥—Ä–µ—à–∫–∞—Ç–∞

    println!("{:?}\n{:?}\n{:?}", x, y, z);
    println!();

    let x: i32 = "-13".parse().unwrap();
    // let y: u8 = "323".parse().unwrap();
    let z: f32 = "5e-3".parse().unwrap();
    // –¢—É–∫ –º–æ–∂–µ–º –¥–∞ –ø—Ä–µ–º–∞—Ö–Ω–µ–º –∏ Result

    println!("{:?}\n???\n{:?}", x, z);
    println!();

    parse_student();
    println!();
}

// FromStr –∑–∞ –Ω–∞—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏

#[derive(Debug)]
struct Student {
    name: String,
    faculty_number: String,
}

impl FromStr for Student {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.split(", ").collect::<Vec<_>>().as_slice() {
            [name, faculty_number] => {
                let name = name.to_string();
                let faculty_number = faculty_number.to_string();
                Ok(Self {
                    name,
                    faculty_number,
                })
            }
            _ => Err(String::from("ü§∑ü§∑ü§∑")),
        }
    }
}

fn parse_student() {
    let s1: Result<Student, _> = "–î–∞–Ω—á–æ –ï. –°—Ç—É–¥–µ–Ω—Ç, 12345".parse();
    let s2: Result<Student, _> = "–ì–∏–Ω–∫–∞ –ë–∏–ª–æ–±–∞, 77777".parse();
    let s3: Result<Student, _> = "–ë—è–ª –ú–µ—Ä—Ü–µ–¥–µ—Å".parse();

    println!("{:?}\n{:?}\n{:?}", s1, s2, s3);
}
